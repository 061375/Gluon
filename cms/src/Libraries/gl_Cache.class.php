<?php
#Libraries\gl_Cache
namespace Libraries;
class gl_Cache
{
    
    // ---
    
    private $files;
    
    // ---
    
    private $header;
    
    
    function __construct($error_handler)
	{
		$this->errors = $error_handler;
        $this->header  = "<?php\n#auto-generated by ".__METHOD__." on ".date('m/d/Y H:i:s e',strtotime('now'))."\n";
    }
    /**
     * empty the cache folder
     * @return void
     * */
    public function delete_cache()
    {
        // empty the cache folder
        foreach (new \DirectoryIterator('cache') as $fileInfo) {
            if(!$fileInfo->isDot()) {
                unlink($fileInfo->getPathname());
            }
        }
    }
    /**
     * recurse through specified folder search for specified file type
     * @param string $dir
     * @param string $ext 
     * */
    public function recurse_get_files($dir,$ext = '.php')
    {
        $return = array();
        $Directory = new \RecursiveDirectoryIterator($dir);
        $Iterator = new \RecursiveIteratorIterator($Directory);
        $objects = new \RegexIterator($Iterator, '/^.+\\'.$ext.'$/i', \RecursiveRegexIterator::GET_MATCH);
        foreach($objects as $name => $object){
            $return[] = $name;
        }
        return $return;
    }
    /**
     * create the classes cache file ( a PHP array )
     * @param array $src the array to be converted to readable code
     * @param string $path the path to export to
     * @return bool
     * */
    public function put_classes($src,$path)
    {
        if(false == file_exists($path)) {
            $error[] = @file_put_contents($path,$this->header);
            $error[] = @file_put_contents($path,'return array(',FILE_APPEND);
        }
        $out = '';
        foreach($src as $s) {
            $out .= "'".$s."',";
        }
        $error[] = @file_put_contents($path,$out.',',FILE_APPEND);
        if(in_array(false,$error)){
            $this->errors->set_error_message(__METHOD__.' error creating cache');
            return false;
        }
        return true;
    }
    public function themes()
    {
        $v = json_decode(file_get_contents(getcwd().'/v/.version'));
        $v = $v->version;
        $yml = array();
        $ymls = $this->recurse_get_files(getcwd().'/themes','.info.yml');
        foreach($ymls as $f) {
            $name = str_replace('.info.yml','',basename($f));
            $yml[$name]['path'] = $f;
            $app = @yaml_parse_file($f);
            $cv = str_replace(substr($v,strpos($v,'.'),strlen($v)),'',$v);
            $tcv = str_replace('.x','',$app['core']);
            if($cv > $tcv){
                unset($yml[$name]);
                print "\nGluon Notice: Theme ".$app['name']." version:".$tcv." not compatible with current version: ".$cv."\nTheme skipped\n";
            }else{
                $yml[$name]['info'] = $app;
            }
        }
        if(false === $this->add_config($yml,'cache/themes.yml.php'))
            return false;
        // else
            return true;
    }
    /**
     * create a generic cache file ( a PHP array )
     * @param array $src the array to be converted to readable code
     * @param string $path the path to export to
     * @return bool
     * */
    public function add_config($src,$path) {
        $error[] = @file_put_contents($path,$this->header);
        $error[] = @file_put_contents($path,'return array(',FILE_APPEND);
        $out = $this->recurse_built_array($src);
        $error[] = @file_put_contents($path,$out,FILE_APPEND);
        $this->add_tail($path);
        if(in_array(false,$error)){
            $this->errors->set_error_message(__METHOD__.' error creating cache');
            return false;
        }
        return true;
    }
    /**
     * tacks on the end of the array
     * @param string path to the cache file
     * @return bool
     * */
    public function add_tail($path)
    {
        $error = @file_put_contents($path,');',FILE_APPEND);
        if(false === $error){
            $this->errors->set_error_message(__METHOD__.' error creating cache');
            return false;
        }
        return true;
    }
    
    
    // ---------------------------------- Private Functions
    
    
    /**
     * recursively build a cache array
     * @param array $array
     * @return string
     * */
    private function recurse_built_array($array)
    {
        if(!is_array($array))return $array;
        $out = '';
        foreach ($array as $key => $val) {
                if('' == $val OR '' == $key)continue;
                if(is_array($val) || is_object($val)) {
                    $val = 'array('.$this->recurse_built_array($val).")";
                    $out .= "'".$key."'=>".$val.",";
                }else{
                    $out .= "'".$key."'=>'".$val."',";
                }
        }
        return $out;
    }
}